{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\KholoodEa\\\\Projects\\\\React-Native\\\\Library\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeListView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport SwipeRow from \"./SwipeRow\";\n\nvar SwipeListView = function (_PureComponent) {\n  _inherits(SwipeListView, _PureComponent);\n\n  var _super = _createSuper(SwipeListView);\n\n  function SwipeListView(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeListView);\n\n    _this = _super.call(this, props);\n\n    _this._renderItem = function (rowData) {\n      return _this.renderItem(rowData, _this._rows);\n    };\n\n    _this._onRef = function (c) {\n      return _this.setRefs(c);\n    };\n\n    _this._rows = {};\n    _this.openCellKey = null;\n    _this.listViewProps = {};\n\n    if (Platform.OS === 'ios') {\n      _this.yScrollOffset = 0;\n      _this.layoutHeight = 0;\n      _this.listViewProps = {\n        onLayout: function onLayout(e) {\n          return _this.onLayout(e);\n        },\n        onContentSizeChange: function onContentSizeChange(w, h) {\n          return _this.onContentSizeChange(w, h);\n        }\n      };\n    }\n\n    _this._onScroll = _this.onScroll.bind(_assertThisInitialized(_this));\n\n    if (_this.props.onScroll && typeof _this.props.onScroll === 'object') {\n      _this.props.onScroll.__addListener(_this._onScroll);\n\n      _this._onScroll = _this.props.onScroll;\n    }\n\n    return _this;\n  }\n\n  _createClass(SwipeListView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.refreshing) {\n        this.safeCloseOpenRow();\n      }\n    }\n  }, {\n    key: \"setScrollEnabled\",\n    value: function setScrollEnabled(enable) {\n      if (this.props.scrollEnabled === false) {\n        return;\n      }\n\n      if (this._listView && this._listView.setNativeProps) {\n        this._listView.setNativeProps({\n          scrollEnabled: enable\n        });\n      } else if (this._listView && this._listView.getScrollResponder) {\n        var scrollResponder = this._listView.getScrollResponder();\n\n        scrollResponder.setNativeProps && scrollResponder.setNativeProps({\n          scrollEnabled: enable\n        });\n      }\n\n      this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n  }, {\n    key: \"safeCloseOpenRow\",\n    value: function safeCloseOpenRow() {\n      var rowRef = this._rows[this.openCellKey];\n\n      if (rowRef && rowRef.closeRow) {\n        this._rows[this.openCellKey].closeRow();\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureBegan\",\n    value: function rowSwipeGestureBegan(key) {\n      if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {\n        this.safeCloseOpenRow();\n      }\n\n      if (this.props.swipeGestureBegan) {\n        this.props.swipeGestureBegan(key);\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureEnded\",\n    value: function rowSwipeGestureEnded(key, data) {\n      if (this.props.swipeGestureEnded) {\n        this.props.swipeGestureEnded(key, data);\n      }\n    }\n  }, {\n    key: \"onRowOpen\",\n    value: function onRowOpen(key, toValue) {\n      if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {\n        this.safeCloseOpenRow();\n      }\n\n      this.openCellKey = key;\n      this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.openCellKey) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      if (Platform.OS === 'ios') {\n        this.yScrollOffset = e.nativeEvent.contentOffset.y;\n      }\n\n      if (this.openCellKey) {\n        if (this.props.closeOnScroll) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n\n      typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      this.layoutHeight = e.nativeEvent.layout.height;\n      this.props.onLayout && this.props.onLayout(e);\n    }\n  }, {\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(w, h) {\n      var height = h - this.layoutHeight;\n\n      if (this.yScrollOffset >= height && height > 0) {\n        if (this._listView instanceof FlatList) {\n          this._listView && this._listView.scrollToEnd();\n        } else if (this._listView instanceof Animated.FlatList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        }\n      }\n\n      this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(ref) {\n      this._listView = ref;\n      this.props.listViewRef && this.props.listViewRef(ref);\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n      var _this2 = this;\n\n      if (!HiddenComponent) {\n        return React.cloneElement(VisibleComponent, _objectSpread({}, VisibleComponent.props, {\n          ref: function ref(row) {\n            return _this2._rows[key] = row;\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this2.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(key, _this2._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this2.props.onRowClose && _this2.props.onRowClose(key, _this2._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this2.props.onRowDidClose && _this2.props.onRowDidClose(key, _this2._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this2.onRowPress();\n          },\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this2.setScrollEnabled(enable);\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this2.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this2.rowSwipeGestureEnded(key, data);\n          }\n        }));\n      } else {\n        return React.createElement(SwipeRow, {\n          onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {\n            return _this2.props.onSwipeValueChange(_objectSpread({}, data, {\n              key: key\n            }));\n          } : null,\n          ref: function ref(row) {\n            return _this2._rows[key] = row;\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this2.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this2.rowSwipeGestureEnded(key, data);\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this2.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(key, _this2._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this2.props.onRowClose && _this2.props.onRowClose(key, _this2._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this2.props.onRowDidClose && _this2.props.onRowDidClose(key, _this2._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this2.onRowPress(key);\n          },\n          leftActivationValue: item.leftActivationValue || this.props.leftActivationValue,\n          rightActivationValue: item.rightActivationValue || this.props.rightActivationValue,\n          leftActionValue: item.leftActionValue || this.props.leftActionValue,\n          rightActionValue: item.rightActionValue || this.props.rightActionValue,\n          initialLeftActionState: item.initialLeftActionState || this.props.initialLeftActionState,\n          initialRightActionState: item.initialRightActionState || this.props.initialRightActionState,\n          onLeftAction: function onLeftAction() {\n            return item.onLeftAction || _this2.props.onLeftAction && _this2.props.onLeftAction(key, _this2._rows);\n          },\n          onRightAction: function onRightAction() {\n            return item.onRightAction || _this2.props.onRightAction && _this2.props.onRightAction(key, _this2._rows);\n          },\n          onLeftActionStatusChange: this.props.onLeftActionStatusChange ? function (data) {\n            return _this2.props.onLeftActionStatusChange(_objectSpread({}, data, {\n              key: key\n            }));\n          } : null,\n          onRightActionStatusChange: this.props.onRightActionStatusChange ? function (data) {\n            return _this2.props.onRightActionStatusChange(_objectSpread({}, data, {\n              key: key\n            }));\n          } : null,\n          shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {\n            return _this2.props.shouldItemUpdate(currentItem, newItem);\n          } : null,\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this2.setScrollEnabled(enable);\n          },\n          leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,\n          rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,\n          closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,\n          disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,\n          disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,\n          stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,\n          stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,\n          recalculateHiddenLayout: this.props.recalculateHiddenLayout,\n          disableHiddenLayoutCalculation: this.props.disableHiddenLayoutCalculation,\n          style: this.props.swipeRowStyle,\n          preview: shouldPreviewRow,\n          previewDuration: this.props.previewDuration,\n          previewOpenDelay: this.props.previewOpenDelay,\n          previewOpenValue: this.props.previewOpenValue,\n          previewRepeat: this.props.previewRepeat,\n          previewRepeatDelay: this.props.previewRepeatDelay,\n          tension: this.props.tension,\n          restSpeedThreshold: this.props.restSpeedThreshold,\n          restDisplacementThreshold: this.props.restDisplacementThreshold,\n          friction: this.props.friction,\n          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,\n          swipeToOpenPercent: this.props.swipeToOpenPercent,\n          swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,\n          swipeToClosePercent: this.props.swipeToClosePercent,\n          item: item,\n          useNativeDriver: this.props.useNativeDriver,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }\n        }, HiddenComponent, VisibleComponent);\n      }\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(rowData, secId, rowId, rowMap) {\n      var key = \"\" + secId + rowId;\n      var Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n      var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);\n      var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;\n      return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(rowData, rowMap) {\n      var Component = this.props.renderItem(rowData, rowMap);\n      var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);\n      var item = rowData.item,\n          index = rowData.index;\n      var key = item.key;\n\n      if (!key && this.props.keyExtractor) {\n        key = this.props.keyExtractor(item, index);\n      }\n\n      var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;\n      return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          useSectionList = _this$props.useSectionList,\n          renderListView = _this$props.renderListView,\n          props = _objectWithoutProperties(_this$props, [\"useSectionList\", \"renderListView\"]);\n\n      if (renderListView) {\n        var useRenderRow = !!this.props.renderRow;\n        return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useRenderRow ? this.renderRow.bind(this, this._rows) : this.renderItem.bind(this));\n      }\n\n      if (useSectionList) {\n        var _ListComponent = this.props.useAnimatedList ? Animated.SectionList : SectionList;\n\n        return React.createElement(_ListComponent, _extends({}, props, this.listViewProps, {\n          ref: this._onRef,\n          onScroll: this._onScroll,\n          renderItem: this._renderItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      var ListComponent = this.props.useAnimatedList ? Animated.FlatList : FlatList;\n      return React.createElement(ListComponent, _extends({}, props, this.listViewProps, {\n        ref: this._onRef,\n        onScroll: this._onScroll,\n        renderItem: this._renderItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return SwipeListView;\n}(PureComponent);\n\nSwipeListView.propTypes = {\n  renderListView: PropTypes.func,\n  renderItem: PropTypes.func,\n  renderHiddenItem: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  leftActivationValue: PropTypes.number,\n  rightActivationValue: PropTypes.number,\n  leftActionValue: PropTypes.number,\n  rightActionValue: PropTypes.number,\n  initialLeftActionState: PropTypes.bool,\n  initialRightActionState: PropTypes.bool,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  closeOnScroll: PropTypes.bool,\n  closeOnRowPress: PropTypes.bool,\n  closeOnRowBeginSwipe: PropTypes.bool,\n  closeOnRowOpen: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  onLeftAction: PropTypes.func,\n  onRightAction: PropTypes.func,\n  onLeftActionStatusChange: PropTypes.func,\n  onRightActionStatusChange: PropTypes.func,\n  onScrollEnabled: PropTypes.func,\n  onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  swipeRowStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n  listViewRef: PropTypes.func,\n  previewRowKey: PropTypes.string,\n  previewFirstRow: PropTypes.bool,\n  previewRowIndex: PropTypes.number,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  useAnimatedList: PropTypes.bool,\n  keyExtractor: PropTypes.func\n};\nSwipeListView.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowBeginSwipe: false,\n  closeOnScroll: true,\n  closeOnRowPress: true,\n  closeOnRowOpen: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  previewFirstRow: false,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000,\n  useAnimatedList: false\n};\nexport default SwipeListView;","map":{"version":3,"sources":["C:/KholoodEa/Projects/React-Native/Library/node_modules/react-native-swipe-list-view/components/SwipeListView.js"],"names":["React","PureComponent","PropTypes","SwipeRow","SwipeListView","props","_renderItem","rowData","renderItem","_rows","_onRef","c","setRefs","openCellKey","listViewProps","Platform","OS","yScrollOffset","layoutHeight","onLayout","e","onContentSizeChange","w","h","_onScroll","onScroll","bind","__addListener","refreshing","safeCloseOpenRow","enable","scrollEnabled","_listView","setNativeProps","getScrollResponder","scrollResponder","onScrollEnabled","rowRef","closeRow","key","closeOnRowBeginSwipe","swipeGestureBegan","data","swipeGestureEnded","toValue","closeOnRowOpen","onRowOpen","closeOnRowPress","nativeEvent","contentOffset","y","closeOnScroll","layout","height","FlatList","scrollToEnd","Animated","ref","listViewRef","VisibleComponent","HiddenComponent","item","shouldPreviewRow","cloneElement","row","onRowDidOpen","onRowClose","onRowDidClose","onRowPress","setScrollEnabled","rowSwipeGestureBegan","_","rowSwipeGestureEnded","onSwipeValueChange","leftActivationValue","rightActivationValue","leftActionValue","rightActionValue","initialLeftActionState","initialRightActionState","onLeftAction","onRightAction","onLeftActionStatusChange","onRightActionStatusChange","shouldItemUpdate","currentItem","newItem","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","disableHiddenLayoutCalculation","swipeRowStyle","previewDuration","previewOpenDelay","previewOpenValue","previewRepeat","previewRepeatDelay","tension","restSpeedThreshold","restDisplacementThreshold","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","swipeToOpenVelocityContribution","swipeToClosePercent","useNativeDriver","secId","rowId","rowMap","Component","renderRow","renderHiddenRow","previewRowId","dataSource","getRowIDForFlatIndex","previewRowIndex","previewFirstRow","renderCell","renderHiddenItem","index","keyExtractor","previewRowKey","useSectionList","renderListView","useRenderRow","ListComponent","useAnimatedList","SectionList","propTypes","func","number","bool","oneOfType","object","ViewPropTypes","style","string","defaultProps"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;AASA,OAAOC,QAAP;;IAKMC,a;;;;;AACF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UA8VnBC,WA9VmB,GA8VL,UAAAC,OAAO;AAAA,aAAI,MAAKC,UAAL,CAAgBD,OAAhB,EAAyB,MAAKE,KAA9B,CAAJ;AAAA,KA9VF;;AAAA,UAgWnBC,MAhWmB,GAgWV,UAAAC,CAAC;AAAA,aAAI,MAAKC,OAAL,CAAaD,CAAb,CAAJ;AAAA,KAhWS;;AAEf,UAAKF,KAAL,GAAa,EAAb;AACA,UAAKI,WAAL,GAAmB,IAAnB;AACA,UAAKC,aAAL,GAAqB,EAArB;;AACA,QAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AAGvB,YAAKC,aAAL,GAAqB,CAArB;AACA,YAAKC,YAAL,GAAoB,CAApB;AACA,YAAKJ,aAAL,GAAqB;AACjBK,QAAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAI,MAAKD,QAAL,CAAcC,CAAd,CAAJ;AAAA,SADM;AAEjBC,QAAAA,mBAAmB,EAAE,6BAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAU,MAAKF,mBAAL,CAAyBC,CAAzB,EAA4BC,CAA5B,CAAV;AAAA;AAFJ,OAArB;AAIH;;AACD,UAAKC,SAAL,GAAiB,MAAKC,QAAL,CAAcC,IAAd,+BAAjB;;AACA,QAAI,MAAKrB,KAAL,CAAWoB,QAAX,IAAuB,OAAO,MAAKpB,KAAL,CAAWoB,QAAlB,KAA+B,QAA1D,EAAoE;AAEhE,YAAKpB,KAAL,CAAWoB,QAAX,CAAoBE,aAApB,CAAkC,MAAKH,SAAvC;;AACA,YAAKA,SAAL,GAAiB,MAAKnB,KAAL,CAAWoB,QAA5B;AACH;;AApBc;AAqBlB;;;;yCAEoB;AACjB,UAAI,KAAKpB,KAAL,CAAWuB,UAAf,EAA2B;AACvB,aAAKC,gBAAL;AACH;AACJ;;;qCAEgBC,M,EAAQ;AACrB,UAAI,KAAKzB,KAAL,CAAW0B,aAAX,KAA6B,KAAjC,EAAwC;AACpC;AACH;;AAGD,UAAI,KAAKC,SAAL,IAAkB,KAAKA,SAAL,CAAeC,cAArC,EAAqD;AACjD,aAAKD,SAAL,CAAeC,cAAf,CAA8B;AAAEF,UAAAA,aAAa,EAAED;AAAjB,SAA9B;AACH,OAFD,MAEO,IAAI,KAAKE,SAAL,IAAkB,KAAKA,SAAL,CAAeE,kBAArC,EAAyD;AAC5D,YAAMC,eAAe,GAAG,KAAKH,SAAL,CAAeE,kBAAf,EAAxB;;AACAC,QAAAA,eAAe,CAACF,cAAhB,IACIE,eAAe,CAACF,cAAhB,CAA+B;AAAEF,UAAAA,aAAa,EAAED;AAAjB,SAA/B,CADJ;AAEH;;AACD,WAAKzB,KAAL,CAAW+B,eAAX,IAA8B,KAAK/B,KAAL,CAAW+B,eAAX,CAA2BN,MAA3B,CAA9B;AACH;;;uCAEkB;AACf,UAAMO,MAAM,GAAG,KAAK5B,KAAL,CAAW,KAAKI,WAAhB,CAAf;;AACA,UAAIwB,MAAM,IAAIA,MAAM,CAACC,QAArB,EAA+B;AAC3B,aAAK7B,KAAL,CAAW,KAAKI,WAAhB,EAA6ByB,QAA7B;AACH;AACJ;;;yCAEoBC,G,EAAK;AACtB,UACI,KAAKlC,KAAL,CAAWmC,oBAAX,IACA,KAAK3B,WADL,IAEA,KAAKA,WAAL,KAAqB0B,GAHzB,EAIE;AACE,aAAKV,gBAAL;AACH;;AAED,UAAI,KAAKxB,KAAL,CAAWoC,iBAAf,EAAkC;AAC9B,aAAKpC,KAAL,CAAWoC,iBAAX,CAA6BF,GAA7B;AACH;AACJ;;;yCAEoBA,G,EAAKG,I,EAAM;AAC5B,UAAI,KAAKrC,KAAL,CAAWsC,iBAAf,EAAkC;AAC9B,aAAKtC,KAAL,CAAWsC,iBAAX,CAA6BJ,GAA7B,EAAkCG,IAAlC;AACH;AACJ;;;8BAESH,G,EAAKK,O,EAAS;AACpB,UACI,KAAK/B,WAAL,IACA,KAAKA,WAAL,KAAqB0B,GADrB,IAEA,KAAKlC,KAAL,CAAWwC,cAFX,IAGA,CAAC,KAAKxC,KAAL,CAAWmC,oBAJhB,EAKE;AACE,aAAKX,gBAAL;AACH;;AACD,WAAKhB,WAAL,GAAmB0B,GAAnB;AACA,WAAKlC,KAAL,CAAWyC,SAAX,IAAwB,KAAKzC,KAAL,CAAWyC,SAAX,CAAqBP,GAArB,EAA0B,KAAK9B,KAA/B,EAAsCmC,OAAtC,CAAxB;AACH;;;iCAEY;AACT,UAAI,KAAK/B,WAAT,EAAsB;AAClB,YAAI,KAAKR,KAAL,CAAW0C,eAAf,EAAgC;AAC5B,eAAKlB,gBAAL;AACA,eAAKhB,WAAL,GAAmB,IAAnB;AACH;AACJ;AACJ;;;6BAEQO,C,EAAG;AACR,UAAIL,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvB,aAAKC,aAAL,GAAqBG,CAAC,CAAC4B,WAAF,CAAcC,aAAd,CAA4BC,CAAjD;AACH;;AACD,UAAI,KAAKrC,WAAT,EAAsB;AAClB,YAAI,KAAKR,KAAL,CAAW8C,aAAf,EAA8B;AAC1B,eAAKtB,gBAAL;AACA,eAAKhB,WAAL,GAAmB,IAAnB;AACH;AACJ;;AACD,aAAO,KAAKR,KAAL,CAAWoB,QAAlB,KAA+B,UAA/B,IAA6C,KAAKpB,KAAL,CAAWoB,QAAX,CAAoBL,CAApB,CAA7C;AACH;;;6BAEQA,C,EAAG;AACR,WAAKF,YAAL,GAAoBE,CAAC,CAAC4B,WAAF,CAAcI,MAAd,CAAqBC,MAAzC;AACA,WAAKhD,KAAL,CAAWc,QAAX,IAAuB,KAAKd,KAAL,CAAWc,QAAX,CAAoBC,CAApB,CAAvB;AACH;;;wCAMmBE,C,EAAGC,C,EAAG;AACtB,UAAM8B,MAAM,GAAG9B,CAAC,GAAG,KAAKL,YAAxB;;AACA,UAAI,KAAKD,aAAL,IAAsBoC,MAAtB,IAAgCA,MAAM,GAAG,CAA7C,EAAgD;AAC5C,YAAI,KAAKrB,SAAL,YAA0BsB,QAA9B,EAAwC;AACpC,eAAKtB,SAAL,IAAkB,KAAKA,SAAL,CAAeuB,WAAf,EAAlB;AACH,SAFD,MAEO,IAAI,KAAKvB,SAAL,YAA0BwB,QAAQ,CAACF,QAAvC,EAAiD;AACpD,eAAKtB,SAAL,CAAeuB,WAAf,IAA8B,KAAKvB,SAAL,CAAeuB,WAAf,EAA9B;AACH;AACJ;;AACD,WAAKlD,KAAL,CAAWgB,mBAAX,IAAkC,KAAKhB,KAAL,CAAWgB,mBAAX,CAA+BC,CAA/B,EAAkCC,CAAlC,CAAlC;AACH;;;4BAEOkC,G,EAAK;AACT,WAAKzB,SAAL,GAAiByB,GAAjB;AACA,WAAKpD,KAAL,CAAWqD,WAAX,IAA0B,KAAKrD,KAAL,CAAWqD,WAAX,CAAuBD,GAAvB,CAA1B;AACH;;;+BAEUE,gB,EAAkBC,e,EAAiBrB,G,EAAKsB,I,EAAMC,gB,EAAkB;AAAA;;AACvE,UAAI,CAACF,eAAL,EAAsB;AAClB,eAAO5D,KAAK,CAAC+D,YAAN,CAAmBJ,gBAAnB,oBACAA,gBAAgB,CAACtD,KADjB;AAEHoD,UAAAA,GAAG,EAAE,aAAAO,GAAG;AAAA,mBAAK,MAAI,CAACvD,KAAL,CAAW8B,GAAX,IAAkByB,GAAvB;AAAA,WAFL;AAGHlB,UAAAA,SAAS,EAAE,mBAAAF,OAAO;AAAA,mBAAI,MAAI,CAACE,SAAL,CAAeP,GAAf,EAAoBK,OAApB,CAAJ;AAAA,WAHf;AAIHqB,UAAAA,YAAY,EAAE,sBAAArB,OAAO;AAAA,mBACjB,MAAI,CAACvC,KAAL,CAAW4D,YAAX,IACA,MAAI,CAAC5D,KAAL,CAAW4D,YAAX,CAAwB1B,GAAxB,EAA6B,MAAI,CAAC9B,KAAlC,EAAyCmC,OAAzC,CAFiB;AAAA,WAJlB;AAOHsB,UAAAA,UAAU,EAAE;AAAA,mBACR,MAAI,CAAC7D,KAAL,CAAW6D,UAAX,IACA,MAAI,CAAC7D,KAAL,CAAW6D,UAAX,CAAsB3B,GAAtB,EAA2B,MAAI,CAAC9B,KAAhC,CAFQ;AAAA,WAPT;AAUH0D,UAAAA,aAAa,EAAE;AAAA,mBACX,MAAI,CAAC9D,KAAL,CAAW8D,aAAX,IACA,MAAI,CAAC9D,KAAL,CAAW8D,aAAX,CAAyB5B,GAAzB,EAA8B,MAAI,CAAC9B,KAAnC,CAFW;AAAA,WAVZ;AAaH2D,UAAAA,UAAU,EAAE;AAAA,mBAAM,MAAI,CAACA,UAAL,EAAN;AAAA,WAbT;AAcHC,UAAAA,gBAAgB,EAAE,0BAAAvC,MAAM;AAAA,mBAAI,MAAI,CAACuC,gBAAL,CAAsBvC,MAAtB,CAAJ;AAAA,WAdrB;AAeHW,UAAAA,iBAAiB,EAAE;AAAA,mBAAM,MAAI,CAAC6B,oBAAL,CAA0B/B,GAA1B,CAAN;AAAA,WAfhB;AAgBHI,UAAAA,iBAAiB,EAAE,2BAAC4B,CAAD,EAAI7B,IAAJ;AAAA,mBACf,MAAI,CAAC8B,oBAAL,CAA0BjC,GAA1B,EAA+BG,IAA/B,CADe;AAAA;AAhBhB,WAAP;AAmBH,OApBD,MAoBO;AACH,eACI,oBAAC,QAAD;AACI,UAAA,kBAAkB,EACd,KAAKrC,KAAL,CAAWoE,kBAAX,GACM,UAAA/B,IAAI;AAAA,mBACA,MAAI,CAACrC,KAAL,CAAWoE,kBAAX,mBACO/B,IADP;AAEIH,cAAAA,GAAG,EAAHA;AAFJ,eADA;AAAA,WADV,GAMM,IARd;AAUI,UAAA,GAAG,EAAE,aAAAyB,GAAG;AAAA,mBAAK,MAAI,CAACvD,KAAL,CAAW8B,GAAX,IAAkByB,GAAvB;AAAA,WAVZ;AAWI,UAAA,iBAAiB,EAAE;AAAA,mBAAM,MAAI,CAACM,oBAAL,CAA0B/B,GAA1B,CAAN;AAAA,WAXvB;AAYI,UAAA,iBAAiB,EAAE,2BAACgC,CAAD,EAAI7B,IAAJ;AAAA,mBACf,MAAI,CAAC8B,oBAAL,CAA0BjC,GAA1B,EAA+BG,IAA/B,CADe;AAAA,WAZvB;AAeI,UAAA,SAAS,EAAE,mBAAAE,OAAO;AAAA,mBAAI,MAAI,CAACE,SAAL,CAAeP,GAAf,EAAoBK,OAApB,CAAJ;AAAA,WAftB;AAgBI,UAAA,YAAY,EAAE,sBAAAA,OAAO;AAAA,mBACjB,MAAI,CAACvC,KAAL,CAAW4D,YAAX,IACA,MAAI,CAAC5D,KAAL,CAAW4D,YAAX,CAAwB1B,GAAxB,EAA6B,MAAI,CAAC9B,KAAlC,EAAyCmC,OAAzC,CAFiB;AAAA,WAhBzB;AAoBI,UAAA,UAAU,EAAE;AAAA,mBACR,MAAI,CAACvC,KAAL,CAAW6D,UAAX,IACA,MAAI,CAAC7D,KAAL,CAAW6D,UAAX,CAAsB3B,GAAtB,EAA2B,MAAI,CAAC9B,KAAhC,CAFQ;AAAA,WApBhB;AAwBI,UAAA,aAAa,EAAE;AAAA,mBACX,MAAI,CAACJ,KAAL,CAAW8D,aAAX,IACA,MAAI,CAAC9D,KAAL,CAAW8D,aAAX,CAAyB5B,GAAzB,EAA8B,MAAI,CAAC9B,KAAnC,CAFW;AAAA,WAxBnB;AA4BI,UAAA,UAAU,EAAE;AAAA,mBAAM,MAAI,CAAC2D,UAAL,CAAgB7B,GAAhB,CAAN;AAAA,WA5BhB;AA6BI,UAAA,mBAAmB,EACfsB,IAAI,CAACa,mBAAL,IACA,KAAKrE,KAAL,CAAWqE,mBA/BnB;AAiCI,UAAA,oBAAoB,EAChBb,IAAI,CAACc,oBAAL,IACA,KAAKtE,KAAL,CAAWsE,oBAnCnB;AAqCI,UAAA,eAAe,EACXd,IAAI,CAACe,eAAL,IAAwB,KAAKvE,KAAL,CAAWuE,eAtC3C;AAwCI,UAAA,gBAAgB,EACZf,IAAI,CAACgB,gBAAL,IAAyB,KAAKxE,KAAL,CAAWwE,gBAzC5C;AA2CI,UAAA,sBAAsB,EAClBhB,IAAI,CAACiB,sBAAL,IACA,KAAKzE,KAAL,CAAWyE,sBA7CnB;AA+CI,UAAA,uBAAuB,EACnBjB,IAAI,CAACkB,uBAAL,IACA,KAAK1E,KAAL,CAAW0E,uBAjDnB;AAmDI,UAAA,YAAY,EAAE;AAAA,mBACVlB,IAAI,CAACmB,YAAL,IACC,MAAI,CAAC3E,KAAL,CAAW2E,YAAX,IACG,MAAI,CAAC3E,KAAL,CAAW2E,YAAX,CAAwBzC,GAAxB,EAA6B,MAAI,CAAC9B,KAAlC,CAHM;AAAA,WAnDlB;AAwDI,UAAA,aAAa,EAAE;AAAA,mBACXoD,IAAI,CAACoB,aAAL,IACC,MAAI,CAAC5E,KAAL,CAAW4E,aAAX,IACG,MAAI,CAAC5E,KAAL,CAAW4E,aAAX,CAAyB1C,GAAzB,EAA8B,MAAI,CAAC9B,KAAnC,CAHO;AAAA,WAxDnB;AA6DI,UAAA,wBAAwB,EACpB,KAAKJ,KAAL,CAAW6E,wBAAX,GACM,UAAAxC,IAAI;AAAA,mBACA,MAAI,CAACrC,KAAL,CAAW6E,wBAAX,mBACOxC,IADP;AAEIH,cAAAA,GAAG,EAAHA;AAFJ,eADA;AAAA,WADV,GAMM,IApEd;AAsEI,UAAA,yBAAyB,EACrB,KAAKlC,KAAL,CAAW8E,yBAAX,GACM,UAAAzC,IAAI;AAAA,mBACA,MAAI,CAACrC,KAAL,CAAW8E,yBAAX,mBACOzC,IADP;AAEIH,cAAAA,GAAG,EAAHA;AAFJ,eADA;AAAA,WADV,GAMM,IA7Ed;AA+EI,UAAA,gBAAgB,EACZ,KAAKlC,KAAL,CAAW+E,gBAAX,GACM,UAACC,WAAD,EAAcC,OAAd;AAAA,mBACI,MAAI,CAACjF,KAAL,CAAW+E,gBAAX,CACIC,WADJ,EAEIC,OAFJ,CADJ;AAAA,WADN,GAMM,IAtFd;AAwFI,UAAA,gBAAgB,EAAE,0BAAAxD,MAAM;AAAA,mBAAI,MAAI,CAACuC,gBAAL,CAAsBvC,MAAtB,CAAJ;AAAA,WAxF5B;AAyFI,UAAA,aAAa,EACT+B,IAAI,CAAC0B,aAAL,IAAsB,KAAKlF,KAAL,CAAWkF,aA1FzC;AA4FI,UAAA,cAAc,EACV1B,IAAI,CAAC2B,cAAL,IAAuB,KAAKnF,KAAL,CAAWmF,cA7F1C;AA+FI,UAAA,eAAe,EACX3B,IAAI,CAACd,eAAL,IAAwB,KAAK1C,KAAL,CAAW0C,eAhG3C;AAkGI,UAAA,gBAAgB,EACZc,IAAI,CAAC4B,gBAAL,IAAyB,KAAKpF,KAAL,CAAWoF,gBAnG5C;AAqGI,UAAA,iBAAiB,EACb5B,IAAI,CAAC6B,iBAAL,IAA0B,KAAKrF,KAAL,CAAWqF,iBAtG7C;AAwGI,UAAA,aAAa,EACT7B,IAAI,CAAC8B,aAAL,IAAsB,KAAKtF,KAAL,CAAWsF,aAzGzC;AA2GI,UAAA,cAAc,EACV9B,IAAI,CAAC+B,cAAL,IAAuB,KAAKvF,KAAL,CAAWuF,cA5G1C;AA8GI,UAAA,uBAAuB,EAAE,KAAKvF,KAAL,CAAWwF,uBA9GxC;AA+GI,UAAA,8BAA8B,EAC1B,KAAKxF,KAAL,CAAWyF,8BAhHnB;AAkHI,UAAA,KAAK,EAAE,KAAKzF,KAAL,CAAW0F,aAlHtB;AAmHI,UAAA,OAAO,EAAEjC,gBAnHb;AAoHI,UAAA,eAAe,EAAE,KAAKzD,KAAL,CAAW2F,eApHhC;AAqHI,UAAA,gBAAgB,EAAE,KAAK3F,KAAL,CAAW4F,gBArHjC;AAsHI,UAAA,gBAAgB,EAAE,KAAK5F,KAAL,CAAW6F,gBAtHjC;AAuHI,UAAA,aAAa,EAAE,KAAK7F,KAAL,CAAW8F,aAvH9B;AAwHI,UAAA,kBAAkB,EAAE,KAAK9F,KAAL,CAAW+F,kBAxHnC;AAyHI,UAAA,OAAO,EAAE,KAAK/F,KAAL,CAAWgG,OAzHxB;AA0HI,UAAA,kBAAkB,EAAE,KAAKhG,KAAL,CAAWiG,kBA1HnC;AA2HI,UAAA,yBAAyB,EACrB,KAAKjG,KAAL,CAAWkG,yBA5HnB;AA8HI,UAAA,QAAQ,EAAE,KAAKlG,KAAL,CAAWmG,QA9HzB;AA+HI,UAAA,kCAAkC,EAC9B,KAAKnG,KAAL,CAAWoG,kCAhInB;AAkII,UAAA,kBAAkB,EAAE,KAAKpG,KAAL,CAAWqG,kBAlInC;AAmII,UAAA,+BAA+B,EAC3B,KAAKrG,KAAL,CAAWsG,+BApInB;AAsII,UAAA,mBAAmB,EAAE,KAAKtG,KAAL,CAAWuG,mBAtIpC;AAuII,UAAA,IAAI,EAAE/C,IAvIV;AAwII,UAAA,eAAe,EAAE,KAAKxD,KAAL,CAAWwG,eAxIhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WA0IKjD,eA1IL,EA2IKD,gBA3IL,CADJ;AA+IH;AACJ;;;8BAISpD,O,EAASuG,K,EAAOC,K,EAAOC,M,EAAQ;AACrC,UAAMzE,GAAG,QAAMuE,KAAN,GAAcC,KAAvB;AACA,UAAME,SAAS,GAAG,KAAK5G,KAAL,CAAW6G,SAAX,CAAqB3G,OAArB,EAA8BuG,KAA9B,EAAqCC,KAArC,EAA4CC,MAA5C,CAAlB;AACA,UAAMpD,eAAe,GACjB,KAAKvD,KAAL,CAAW8G,eAAX,IACA,KAAK9G,KAAL,CAAW8G,eAAX,CAA2B5G,OAA3B,EAAoCuG,KAApC,EAA2CC,KAA3C,EAAkDC,MAAlD,CAFJ;AAGA,UAAMI,YAAY,GACd,KAAK/G,KAAL,CAAWgH,UAAX,IACA,KAAKhH,KAAL,CAAWgH,UAAX,CAAsBC,oBAAtB,CACI,KAAKjH,KAAL,CAAWkH,eAAX,IAA8B,CADlC,CAFJ;AAKA,UAAMzD,gBAAgB,GAClB,CAAC,KAAKzD,KAAL,CAAWmH,eAAX,IAA8B,KAAKnH,KAAL,CAAWkH,eAA1C,KACAR,KAAK,KAAKK,YAFd;AAIA,aAAO,KAAKK,UAAL,CACHR,SADG,EAEHrD,eAFG,EAGHrB,GAHG,EAIHhC,OAJG,EAKHuD,gBALG,CAAP;AAOH;;;+BAEUvD,O,EAASyG,M,EAAQ;AACxB,UAAMC,SAAS,GAAG,KAAK5G,KAAL,CAAWG,UAAX,CAAsBD,OAAtB,EAA+ByG,MAA/B,CAAlB;AACA,UAAMpD,eAAe,GACjB,KAAKvD,KAAL,CAAWqH,gBAAX,IACA,KAAKrH,KAAL,CAAWqH,gBAAX,CAA4BnH,OAA5B,EAAqCyG,MAArC,CAFJ;AAFwB,UAKhBnD,IALgB,GAKAtD,OALA,CAKhBsD,IALgB;AAAA,UAKV8D,KALU,GAKApH,OALA,CAKVoH,KALU;AAAA,UAMlBpF,GANkB,GAMVsB,IANU,CAMlBtB,GANkB;;AAOxB,UAAI,CAACA,GAAD,IAAQ,KAAKlC,KAAL,CAAWuH,YAAvB,EAAqC;AACjCrF,QAAAA,GAAG,GAAG,KAAKlC,KAAL,CAAWuH,YAAX,CAAwB/D,IAAxB,EAA8B8D,KAA9B,CAAN;AACH;;AAED,UAAM7D,gBAAgB,GAClB,OAAOvB,GAAP,KAAe,WAAf,IAA8B,KAAKlC,KAAL,CAAWwH,aAAX,KAA6BtF,GAD/D;AAGA,aAAO,KAAKkF,UAAL,CACHR,SADG,EAEHrD,eAFG,EAGHrB,GAHG,EAIHsB,IAJG,EAKHC,gBALG,CAAP;AAOH;;;6BAMQ;AAAA,wBACgD,KAAKzD,KADrD;AAAA,UACGyH,cADH,eACGA,cADH;AAAA,UACmBC,cADnB,eACmBA,cADnB;AAAA,UACsC1H,KADtC;;AAGL,UAAI0H,cAAJ,EAAoB;AAGhB,YAAMC,YAAY,GAAG,CAAC,CAAC,KAAK3H,KAAL,CAAW6G,SAAlC;AACA,eAAOa,cAAc,CACjB1H,KADiB,EAEjB,KAAKO,OAAL,CAAac,IAAb,CAAkB,IAAlB,CAFiB,EAGjB,KAAKD,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAHiB,EAIjBsG,YAAY,GACN,KAAKd,SAAL,CAAexF,IAAf,CAAoB,IAApB,EAA0B,KAAKjB,KAA/B,CADM,GAEN,KAAKD,UAAL,CAAgBkB,IAAhB,CAAqB,IAArB,CANW,CAArB;AAQH;;AAED,UAAIoG,cAAJ,EAAoB;AAChB,YAAMG,cAAa,GAAG,KAAK5H,KAAL,CAAW6H,eAAX,GAChB1E,QAAQ,CAAC2E,WADO,GAEhBA,WAFN;;AAGA,eACI,oBAAC,cAAD,eACQ9H,KADR,EAEQ,KAAKS,aAFb;AAGI,UAAA,GAAG,EAAE,KAAKJ,MAHd;AAII,UAAA,QAAQ,EAAE,KAAKc,SAJnB;AAKI,UAAA,UAAU,EAAE,KAAKlB,WALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AASH;;AACD,UAAM2H,aAAa,GAAG,KAAK5H,KAAL,CAAW6H,eAAX,GAChB1E,QAAQ,CAACF,QADO,GAEhBA,QAFN;AAGA,aACI,oBAAC,aAAD,eACQjD,KADR,EAEQ,KAAKS,aAFb;AAGI,QAAA,GAAG,EAAE,KAAKJ,MAHd;AAII,QAAA,QAAQ,EAAE,KAAKc,SAJnB;AAKI,QAAA,UAAU,EAAE,KAAKlB,WALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AASH;;;;EA9YuBL,a;;AAiZ5BG,aAAa,CAACgI,SAAd,GAA0B;AAKtBL,EAAAA,cAAc,EAAE7H,SAAS,CAACmI,IALJ;AAStB7H,EAAAA,UAAU,EAAEN,SAAS,CAACmI,IATA;AActBX,EAAAA,gBAAgB,EAAExH,SAAS,CAACmI,IAdN;AAkBtB9C,EAAAA,aAAa,EAAErF,SAAS,CAACoI,MAlBH;AAsBtB9C,EAAAA,cAAc,EAAEtF,SAAS,CAACoI,MAtBJ;AA0BtB5D,EAAAA,mBAAmB,EAAExE,SAAS,CAACoI,MA1BT;AA8BtB3D,EAAAA,oBAAoB,EAAEzE,SAAS,CAACoI,MA9BV;AAkCtB1D,EAAAA,eAAe,EAAE1E,SAAS,CAACoI,MAlCL;AAsCtBzD,EAAAA,gBAAgB,EAAE3E,SAAS,CAACoI,MAtCN;AA0CtBxD,EAAAA,sBAAsB,EAAE5E,SAAS,CAACqI,IA1CZ;AA8CtBxD,EAAAA,uBAAuB,EAAE7E,SAAS,CAACqI,IA9Cb;AAkDtB5C,EAAAA,aAAa,EAAEzF,SAAS,CAACoI,MAlDH;AAsDtB1C,EAAAA,cAAc,EAAE1F,SAAS,CAACoI,MAtDJ;AA0DtBnF,EAAAA,aAAa,EAAEjD,SAAS,CAACqI,IA1DH;AA8DtBxF,EAAAA,eAAe,EAAE7C,SAAS,CAACqI,IA9DL;AAkEtB/F,EAAAA,oBAAoB,EAAEtC,SAAS,CAACqI,IAlEV;AAsEtB1F,EAAAA,cAAc,EAAE3C,SAAS,CAACqI,IAtEJ;AA0EtB9C,EAAAA,gBAAgB,EAAEvF,SAAS,CAACqI,IA1EN;AA8EtB7C,EAAAA,iBAAiB,EAAExF,SAAS,CAACqI,IA9EP;AAwFtB1C,EAAAA,uBAAuB,EAAE3F,SAAS,CAACqI,IAxFb;AA+FtBzC,EAAAA,8BAA8B,EAAE5F,SAAS,CAACqI,IA/FpB;AAmGtB9F,EAAAA,iBAAiB,EAAEvC,SAAS,CAACmI,IAnGP;AAuGtB1F,EAAAA,iBAAiB,EAAEzC,SAAS,CAACmI,IAvGP;AA2GtBvF,EAAAA,SAAS,EAAE5C,SAAS,CAACmI,IA3GC;AA+GtBpE,EAAAA,YAAY,EAAE/D,SAAS,CAACmI,IA/GF;AAmHtBnE,EAAAA,UAAU,EAAEhE,SAAS,CAACmI,IAnHA;AAuHtBlE,EAAAA,aAAa,EAAEjE,SAAS,CAACmI,IAvHH;AA2HtBrD,EAAAA,YAAY,EAAE9E,SAAS,CAACmI,IA3HF;AA+HtBpD,EAAAA,aAAa,EAAE/E,SAAS,CAACmI,IA/HH;AAmItBnD,EAAAA,wBAAwB,EAAEhF,SAAS,CAACmI,IAnId;AAuItBlD,EAAAA,yBAAyB,EAAEjF,SAAS,CAACmI,IAvIf;AA2ItBjG,EAAAA,eAAe,EAAElC,SAAS,CAACmI,IA3IL;AA+ItB5G,EAAAA,QAAQ,EAAEvB,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACmI,IAAX,EAAiBnI,SAAS,CAACuI,MAA3B,CAApB,CA/IY;AAmJtB1C,EAAAA,aAAa,EAAE2C,aAAa,GAAGA,aAAa,CAACC,KAAjB,GAAyBzI,SAAS,CAACuI,MAnJzC;AAwJtB/E,EAAAA,WAAW,EAAExD,SAAS,CAACmI,IAxJD;AA4JtBR,EAAAA,aAAa,EAAE3H,SAAS,CAAC0I,MA5JH;AAgKtBpB,EAAAA,eAAe,EAAEtH,SAAS,CAACqI,IAhKL;AAsKtBhB,EAAAA,eAAe,EAAErH,SAAS,CAACoI,MAtKL;AA0KtBtC,EAAAA,eAAe,EAAE9F,SAAS,CAACoI,MA1KL;AA8KtBnC,EAAAA,aAAa,EAAEjG,SAAS,CAACqI,IA9KH;AAmLtBnC,EAAAA,kBAAkB,EAAElG,SAAS,CAACoI,MAnLR;AAuLtBrC,EAAAA,gBAAgB,EAAE/F,SAAS,CAACoI,MAvLN;AA4LtBpC,EAAAA,gBAAgB,EAAEhG,SAAS,CAACoI,MA5LN;AAgMtB9B,EAAAA,QAAQ,EAAEtG,SAAS,CAACoI,MAhME;AAoMtBjC,EAAAA,OAAO,EAAEnG,SAAS,CAACoI,MApMG;AAwMtBhC,EAAAA,kBAAkB,EAAEpG,SAAS,CAACoI,MAxMR;AA4MtB/B,EAAAA,yBAAyB,EAAErG,SAAS,CAACoI,MA5Mf;AAgNtB7B,EAAAA,kCAAkC,EAAEvG,SAAS,CAACoI,MAhNxB;AAqNtB5B,EAAAA,kBAAkB,EAAExG,SAAS,CAACoI,MArNR;AA2NtB3B,EAAAA,+BAA+B,EAAEzG,SAAS,CAACoI,MA3NrB;AAgOtB1B,EAAAA,mBAAmB,EAAE1G,SAAS,CAACoI,MAhOT;AAoOtBlD,EAAAA,gBAAgB,EAAElF,SAAS,CAACmI,IApON;AAwOtB5D,EAAAA,kBAAkB,EAAEvE,SAAS,CAACmI,IAxOR;AA4OtBxB,EAAAA,eAAe,EAAE3G,SAAS,CAACqI,IA5OL;AAgPtBL,EAAAA,eAAe,EAAEhI,SAAS,CAACqI,IAhPL;AAoPtBX,EAAAA,YAAY,EAAE1H,SAAS,CAACmI;AApPF,CAA1B;AAuPAjI,aAAa,CAACyI,YAAd,GAA6B;AACzBtD,EAAAA,aAAa,EAAE,CADU;AAEzBC,EAAAA,cAAc,EAAE,CAFS;AAGzBhD,EAAAA,oBAAoB,EAAE,KAHG;AAIzBW,EAAAA,aAAa,EAAE,IAJU;AAKzBJ,EAAAA,eAAe,EAAE,IALQ;AAMzBF,EAAAA,cAAc,EAAE,IANS;AAOzB4C,EAAAA,gBAAgB,EAAE,KAPO;AAQzBC,EAAAA,iBAAiB,EAAE,KARM;AASzBG,EAAAA,uBAAuB,EAAE,KATA;AAUzBC,EAAAA,8BAA8B,EAAE,KAVP;AAWzB0B,EAAAA,eAAe,EAAE,KAXQ;AAYzBf,EAAAA,kCAAkC,EAAE,CAZX;AAazBC,EAAAA,kBAAkB,EAAE,EAbK;AAczBC,EAAAA,+BAA+B,EAAE,CAdR;AAezBC,EAAAA,mBAAmB,EAAE,EAfI;AAgBzBC,EAAAA,eAAe,EAAE,IAhBQ;AAiBzBV,EAAAA,aAAa,EAAE,KAjBU;AAkBzBC,EAAAA,kBAAkB,EAAE,IAlBK;AAmBzB8B,EAAAA,eAAe,EAAE;AAnBQ,CAA7B;AAsBA,eAAe9H,aAAf","sourcesContent":["'use strict';\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Animated,\n    FlatList,\n    Platform,\n    SectionList,\n    ViewPropTypes,\n} from 'react-native';\n\nimport SwipeRow from './SwipeRow';\n\n/**\n * ListView that renders SwipeRows.\n */\nclass SwipeListView extends PureComponent {\n    constructor(props) {\n        super(props);\n        this._rows = {};\n        this.openCellKey = null;\n        this.listViewProps = {};\n        if (Platform.OS === 'ios') {\n            // Keep track of scroll offset and layout changes on iOS to be able to handle\n            // https://github.com/jemise111/react-native-swipe-list-view/issues/109\n            this.yScrollOffset = 0;\n            this.layoutHeight = 0;\n            this.listViewProps = {\n                onLayout: e => this.onLayout(e),\n                onContentSizeChange: (w, h) => this.onContentSizeChange(w, h),\n            };\n        }\n        this._onScroll = this.onScroll.bind(this);\n        if (this.props.onScroll && typeof this.props.onScroll === 'object') {\n            // Animated.event\n            this.props.onScroll.__addListener(this._onScroll);\n            this._onScroll = this.props.onScroll;\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.refreshing) {\n            this.safeCloseOpenRow();\n        }\n    }\n\n    setScrollEnabled(enable) {\n        if (this.props.scrollEnabled === false) {\n            return;\n        }\n        // Due to multiple issues reported across different versions of RN\n        // We do this in the safest way possible...\n        if (this._listView && this._listView.setNativeProps) {\n            this._listView.setNativeProps({ scrollEnabled: enable });\n        } else if (this._listView && this._listView.getScrollResponder) {\n            const scrollResponder = this._listView.getScrollResponder();\n            scrollResponder.setNativeProps &&\n                scrollResponder.setNativeProps({ scrollEnabled: enable });\n        }\n        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n\n    safeCloseOpenRow() {\n        const rowRef = this._rows[this.openCellKey];\n        if (rowRef && rowRef.closeRow) {\n            this._rows[this.openCellKey].closeRow();\n        }\n    }\n\n    rowSwipeGestureBegan(key) {\n        if (\n            this.props.closeOnRowBeginSwipe &&\n            this.openCellKey &&\n            this.openCellKey !== key\n        ) {\n            this.safeCloseOpenRow();\n        }\n\n        if (this.props.swipeGestureBegan) {\n            this.props.swipeGestureBegan(key);\n        }\n    }\n\n    rowSwipeGestureEnded(key, data) {\n        if (this.props.swipeGestureEnded) {\n            this.props.swipeGestureEnded(key, data);\n        }\n    }\n\n    onRowOpen(key, toValue) {\n        if (\n            this.openCellKey &&\n            this.openCellKey !== key &&\n            this.props.closeOnRowOpen &&\n            !this.props.closeOnRowBeginSwipe\n        ) {\n            this.safeCloseOpenRow();\n        }\n        this.openCellKey = key;\n        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n\n    onRowPress() {\n        if (this.openCellKey) {\n            if (this.props.closeOnRowPress) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n    }\n\n    onScroll(e) {\n        if (Platform.OS === 'ios') {\n            this.yScrollOffset = e.nativeEvent.contentOffset.y;\n        }\n        if (this.openCellKey) {\n            if (this.props.closeOnScroll) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n        typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n\n    onLayout(e) {\n        this.layoutHeight = e.nativeEvent.layout.height;\n        this.props.onLayout && this.props.onLayout(e);\n    }\n\n    // When deleting rows on iOS, the list may end up being over-scrolled,\n    // which will prevent swiping any of the remaining rows. This triggers a scrollToEnd\n    // when that happens, which will make sure the list is kept in bounds.\n    // See: https://github.com/jemise111/react-native-swipe-list-view/issues/109\n    onContentSizeChange(w, h) {\n        const height = h - this.layoutHeight;\n        if (this.yScrollOffset >= height && height > 0) {\n            if (this._listView instanceof FlatList) {\n                this._listView && this._listView.scrollToEnd();\n            } else if (this._listView instanceof Animated.FlatList) {\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\n            }\n        }\n        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n\n    setRefs(ref) {\n        this._listView = ref;\n        this.props.listViewRef && this.props.listViewRef(ref);\n    }\n\n    renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n        if (!HiddenComponent) {\n            return React.cloneElement(VisibleComponent, {\n                ...VisibleComponent.props,\n                ref: row => (this._rows[key] = row),\n                onRowOpen: toValue => this.onRowOpen(key, toValue),\n                onRowDidOpen: toValue =>\n                    this.props.onRowDidOpen &&\n                    this.props.onRowDidOpen(key, this._rows, toValue),\n                onRowClose: () =>\n                    this.props.onRowClose &&\n                    this.props.onRowClose(key, this._rows),\n                onRowDidClose: () =>\n                    this.props.onRowDidClose &&\n                    this.props.onRowDidClose(key, this._rows),\n                onRowPress: () => this.onRowPress(),\n                setScrollEnabled: enable => this.setScrollEnabled(enable),\n                swipeGestureBegan: () => this.rowSwipeGestureBegan(key),\n                swipeGestureEnded: (_, data) =>\n                    this.rowSwipeGestureEnded(key, data),\n            });\n        } else {\n            return (\n                <SwipeRow\n                    onSwipeValueChange={\n                        this.props.onSwipeValueChange\n                            ? data =>\n                                  this.props.onSwipeValueChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    ref={row => (this._rows[key] = row)}\n                    swipeGestureBegan={() => this.rowSwipeGestureBegan(key)}\n                    swipeGestureEnded={(_, data) =>\n                        this.rowSwipeGestureEnded(key, data)\n                    }\n                    onRowOpen={toValue => this.onRowOpen(key, toValue)}\n                    onRowDidOpen={toValue =>\n                        this.props.onRowDidOpen &&\n                        this.props.onRowDidOpen(key, this._rows, toValue)\n                    }\n                    onRowClose={() =>\n                        this.props.onRowClose &&\n                        this.props.onRowClose(key, this._rows)\n                    }\n                    onRowDidClose={() =>\n                        this.props.onRowDidClose &&\n                        this.props.onRowDidClose(key, this._rows)\n                    }\n                    onRowPress={() => this.onRowPress(key)}\n                    leftActivationValue={\n                        item.leftActivationValue ||\n                        this.props.leftActivationValue\n                    }\n                    rightActivationValue={\n                        item.rightActivationValue ||\n                        this.props.rightActivationValue\n                    }\n                    leftActionValue={\n                        item.leftActionValue || this.props.leftActionValue\n                    }\n                    rightActionValue={\n                        item.rightActionValue || this.props.rightActionValue\n                    }\n                    initialLeftActionState={\n                        item.initialLeftActionState ||\n                        this.props.initialLeftActionState\n                    }\n                    initialRightActionState={\n                        item.initialRightActionState ||\n                        this.props.initialRightActionState\n                    }\n                    onLeftAction={() =>\n                        item.onLeftAction ||\n                        (this.props.onLeftAction &&\n                            this.props.onLeftAction(key, this._rows))\n                    }\n                    onRightAction={() =>\n                        item.onRightAction ||\n                        (this.props.onRightAction &&\n                            this.props.onRightAction(key, this._rows))\n                    }\n                    onLeftActionStatusChange={\n                        this.props.onLeftActionStatusChange\n                            ? data =>\n                                  this.props.onLeftActionStatusChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    onRightActionStatusChange={\n                        this.props.onRightActionStatusChange\n                            ? data =>\n                                  this.props.onRightActionStatusChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    shouldItemUpdate={\n                        this.props.shouldItemUpdate\n                            ? (currentItem, newItem) =>\n                                  this.props.shouldItemUpdate(\n                                      currentItem,\n                                      newItem\n                                  )\n                            : null\n                    }\n                    setScrollEnabled={enable => this.setScrollEnabled(enable)}\n                    leftOpenValue={\n                        item.leftOpenValue || this.props.leftOpenValue\n                    }\n                    rightOpenValue={\n                        item.rightOpenValue || this.props.rightOpenValue\n                    }\n                    closeOnRowPress={\n                        item.closeOnRowPress || this.props.closeOnRowPress\n                    }\n                    disableLeftSwipe={\n                        item.disableLeftSwipe || this.props.disableLeftSwipe\n                    }\n                    disableRightSwipe={\n                        item.disableRightSwipe || this.props.disableRightSwipe\n                    }\n                    stopLeftSwipe={\n                        item.stopLeftSwipe || this.props.stopLeftSwipe\n                    }\n                    stopRightSwipe={\n                        item.stopRightSwipe || this.props.stopRightSwipe\n                    }\n                    recalculateHiddenLayout={this.props.recalculateHiddenLayout}\n                    disableHiddenLayoutCalculation={\n                        this.props.disableHiddenLayoutCalculation\n                    }\n                    style={this.props.swipeRowStyle}\n                    preview={shouldPreviewRow}\n                    previewDuration={this.props.previewDuration}\n                    previewOpenDelay={this.props.previewOpenDelay}\n                    previewOpenValue={this.props.previewOpenValue}\n                    previewRepeat={this.props.previewRepeat}\n                    previewRepeatDelay={this.props.previewRepeatDelay}\n                    tension={this.props.tension}\n                    restSpeedThreshold={this.props.restSpeedThreshold}\n                    restDisplacementThreshold={\n                        this.props.restDisplacementThreshold\n                    }\n                    friction={this.props.friction}\n                    directionalDistanceChangeThreshold={\n                        this.props.directionalDistanceChangeThreshold\n                    }\n                    swipeToOpenPercent={this.props.swipeToOpenPercent}\n                    swipeToOpenVelocityContribution={\n                        this.props.swipeToOpenVelocityContribution\n                    }\n                    swipeToClosePercent={this.props.swipeToClosePercent}\n                    item={item} // used for should item update comparisons\n                    useNativeDriver={this.props.useNativeDriver}\n                >\n                    {HiddenComponent}\n                    {VisibleComponent}\n                </SwipeRow>\n            );\n        }\n    }\n\n    // In most use cases this is no longer used. Only in the case we are passed renderListView={true}\n    // there may be legacy code that passes a this.props.renderRow func so we keep this for legacy purposes\n    renderRow(rowData, secId, rowId, rowMap) {\n        const key = `${secId}${rowId}`;\n        const Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenRow &&\n            this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n        const previewRowId =\n            this.props.dataSource &&\n            this.props.dataSource.getRowIDForFlatIndex(\n                this.props.previewRowIndex || 0\n            );\n        const shouldPreviewRow =\n            (this.props.previewFirstRow || this.props.previewRowIndex) &&\n            rowId === previewRowId;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            rowData,\n            shouldPreviewRow\n        );\n    }\n\n    renderItem(rowData, rowMap) {\n        const Component = this.props.renderItem(rowData, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenItem &&\n            this.props.renderHiddenItem(rowData, rowMap);\n        const { item, index } = rowData;\n        let { key } = item;\n        if (!key && this.props.keyExtractor) {\n            key = this.props.keyExtractor(item, index);\n        }\n\n        const shouldPreviewRow =\n            typeof key !== 'undefined' && this.props.previewRowKey === key;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            item,\n            shouldPreviewRow\n        );\n    }\n\n    _renderItem = rowData => this.renderItem(rowData, this._rows);\n\n    _onRef = c => this.setRefs(c);\n\n    render() {\n        const { useSectionList, renderListView, ...props } = this.props;\n\n        if (renderListView) {\n            // Ideally renderRow should be deprecated. We do this check for\n            // legacy purposes to not break certain renderListView cases\n            const useRenderRow = !!this.props.renderRow;\n            return renderListView(\n                props,\n                this.setRefs.bind(this),\n                this.onScroll.bind(this),\n                useRenderRow\n                    ? this.renderRow.bind(this, this._rows)\n                    : this.renderItem.bind(this)\n            );\n        }\n\n        if (useSectionList) {\n            const ListComponent = this.props.useAnimatedList\n                ? Animated.SectionList\n                : SectionList;\n            return (\n                <ListComponent\n                    {...props}\n                    {...this.listViewProps}\n                    ref={this._onRef}\n                    onScroll={this._onScroll}\n                    renderItem={this._renderItem}\n                />\n            );\n        }\n        const ListComponent = this.props.useAnimatedList\n            ? Animated.FlatList\n            : FlatList;\n        return (\n            <ListComponent\n                {...props}\n                {...this.listViewProps}\n                ref={this._onRef}\n                onScroll={this._onScroll}\n                renderItem={this._renderItem}\n            />\n        );\n    }\n}\n\nSwipeListView.propTypes = {\n    /**\n     * To render a custom ListView component, if you don't want to use ReactNative one.\n     * Note: This will call `renderRow`, not `renderItem`\n     */\n    renderListView: PropTypes.func,\n    /**\n     * How to render a row in a FlatList. Should return a valid React Element.\n     */\n    renderItem: PropTypes.func,\n    /**\n     * How to render a hidden row in a FlatList (renders behind the row). Should return a valid React Element.\n     * This is required unless renderItem is passing a SwipeRow.\n     */\n    renderHiddenItem: PropTypes.func,\n    /**\n     * TranslateX value for opening the row to the left (positive number)\n     */\n    leftOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for opening the row to the right (negative number)\n     */\n    rightOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\n     */\n    leftActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onRightActionStatusChange (negative number)\n     */\n    rightActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for left action to which the row will be shifted after gesture release\n     */\n    leftActionValue: PropTypes.number,\n    /**\n     * TranslateX value for right action to which the row will be shifted after gesture release\n     */\n    rightActionValue: PropTypes.number,\n    /**\n     * Initial value for left action state (default is false)\n     */\n    initialLeftActionState: PropTypes.bool,\n    /**\n     * Initial value for right action state (default is false)\n     */\n    initialRightActionState: PropTypes.bool,\n    /**\n     * TranslateX value for stop the row to the left (positive number)\n     */\n    stopLeftSwipe: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the right (negative number)\n     */\n    stopRightSwipe: PropTypes.number,\n    /**\n     * Should open rows be closed when the listView begins scrolling\n     */\n    closeOnScroll: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row is pressed\n     */\n    closeOnRowPress: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row begins to swipe open\n     */\n    closeOnRowBeginSwipe: PropTypes.bool,\n    /**\n     * Should open rows be closed when another row is opened\n     */\n    closeOnRowOpen: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows left\n     */\n    disableLeftSwipe: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows right\n     */\n    disableRightSwipe: PropTypes.bool,\n    /**\n     * Enable hidden row onLayout calculations to run always.\n     *\n     * By default, hidden row size calculations are only done on the first onLayout event\n     * for performance reasons.\n     * Passing ```true``` here will cause calculations to run on every onLayout event.\n     * You may want to do this if your rows' sizes can change.\n     * One case is a SwipeListView with rows of different heights and an options to delete rows.\n     */\n    recalculateHiddenLayout: PropTypes.bool,\n    /**\n     * Disable hidden row onLayout calculations\n     *\n     * Instead, {width: '100%', height: '100%'} will be used.\n     * Improves performance by avoiding component updates, while still working with orientation changes.\n     */\n    disableHiddenLayoutCalculation: PropTypes.bool,\n    /**\n     * Called when a swipe row is animating swipe\n     */\n    swipeGestureBegan: PropTypes.func,\n    /**\n     * Called when user has ended their swipe gesture\n     */\n    swipeGestureEnded: PropTypes.func,\n    /**\n     * Called when a swipe row is animating open\n     */\n    onRowOpen: PropTypes.func,\n    /**\n     * Called when a swipe row has animated open\n     */\n    onRowDidOpen: PropTypes.func,\n    /**\n     * Called when a swipe row is animating closed\n     */\n    onRowClose: PropTypes.func,\n    /**\n     * Called when a swipe row has animated closed\n     */\n    onRowDidClose: PropTypes.func,\n    /**\n     * Called when row shifted to leftActivationValue\n     */\n    onLeftAction: PropTypes.func,\n    /**\n     * Called when row shifted to rightActivationValue\n     */\n    onRightAction: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the leftActivationValue\n     */\n    onLeftActionStatusChange: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the rightActivationValue\n     */\n    onRightActionStatusChange: PropTypes.func,\n    /**\n     * Called when scrolling on the SwipeListView has been enabled/disabled\n     */\n    onScrollEnabled: PropTypes.func,\n    /**\n     * Called when a scroll event is emitted\n     */\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Styles for the parent wrapper View of the SwipeRow\n     */\n    swipeRowStyle: ViewPropTypes ? ViewPropTypes.style : PropTypes.object,\n    /**\n     * Called when the FlatList ref is set and passes a ref to the FlatList\n     * e.g. listViewRef={ ref => this._swipeListViewRef = ref }\n     */\n    listViewRef: PropTypes.func,\n    /**\n     * Should the row with this key do a slide out preview to show that the list is swipeable\n     */\n    previewRowKey: PropTypes.string,\n    /**\n     * [DEPRECATED] Should the first SwipeRow do a slide out preview to show that the list is swipeable\n     */\n    previewFirstRow: PropTypes.bool,\n    /**\n     * [DEPRECATED] Should the specified rowId do a slide out preview to show that the list is swipeable\n     * Note: This ID will be passed to this function to get the correct row index\n     * https://facebook.github.io/react-native/docs/listviewdatasource.html#getrowidforflatindex\n     */\n    previewRowIndex: PropTypes.number,\n    /**\n     * Duration of the slide out preview animation (milliseconds)\n     */\n    previewDuration: PropTypes.number,\n    /**\n     * Should the animation repeat until false is provided\n     */\n    previewRepeat: PropTypes.bool,\n    /**\n     * Time between each full completed animation in milliseconds\n     * Default: 1000 (1 second)\n     */\n    previewRepeatDelay: PropTypes.number,\n    /**\n     * Delay of the slide out preview animation (milliseconds) // default 700ms\n     */\n    previewOpenDelay: PropTypes.number,\n    /**\n     * TranslateX value for the slide out preview animation\n     * Default: 0.5 * props.rightOpenValue\n     */\n    previewOpenValue: PropTypes.number,\n    /**\n     * Friction for the open / close animation\n     */\n    friction: PropTypes.number,\n    /**\n     * Tension for the open / close animation\n     */\n    tension: PropTypes.number,\n    /**\n     * RestSpeedThreshold for the open / close animation\n     */\n    restSpeedThreshold: PropTypes.number,\n    /**\n     * RestDisplacementThreshold for the open / close animation\n     */\n    restDisplacementThreshold: PropTypes.number,\n    /**\n     * The dx value used to detect when a user has begun a swipe gesture\n     */\n    directionalDistanceChangeThreshold: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row opening.\n     */\n    swipeToOpenPercent: PropTypes.number,\n    /**\n     * Describes how much the ending velocity of the gesture affects whether the swipe will result in the item being closed or open.\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\n     * and it'll just take into consideration the swipeToOpenPercent.\n     */\n    swipeToOpenVelocityContribution: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row closing.\n     */\n    swipeToClosePercent: PropTypes.number,\n    /**\n     * callback to determine whether component should update (currentItem, newItem)\n     */\n    shouldItemUpdate: PropTypes.func,\n    /**\n     * Callback invoked any time the swipe value of a SwipeRow is changed\n     */\n    onSwipeValueChange: PropTypes.func,\n    /**\n     * useNativeDriver: true for all animations where possible\n     */\n    useNativeDriver: PropTypes.bool,\n    /**\n     * Use Animated.Flatlist or Animated.Sectionlist\n     */\n    useAnimatedList: PropTypes.bool,\n    /**\n     * keyExtractor: function to generate key value for each row in the list\n     */\n    keyExtractor: PropTypes.func,\n};\n\nSwipeListView.defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowBeginSwipe: false,\n    closeOnScroll: true,\n    closeOnRowPress: true,\n    closeOnRowOpen: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    disableHiddenLayoutCalculation: false,\n    previewFirstRow: false,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50,\n    swipeToOpenVelocityContribution: 0,\n    swipeToClosePercent: 50,\n    useNativeDriver: true,\n    previewRepeat: false,\n    previewRepeatDelay: 1000,\n    useAnimatedList: false,\n};\n\nexport default SwipeListView;\n"]},"metadata":{},"sourceType":"module"}