package expo.modules.updates.db.dao;

import android.database.Cursor;
import android.net.Uri;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import expo.modules.updates.db.Converters;
import expo.modules.updates.db.entity.AssetEntity;
import expo.modules.updates.db.entity.UpdateAssetEntity;
import expo.modules.updates.db.entity.UpdateEntity;
import expo.modules.updates.db.enums.UpdateStatus;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@SuppressWarnings({"unchecked", "deprecation"})
public final class AssetDao_Impl extends AssetDao {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfAssetEntity;

  private final EntityInsertionAdapter __insertionAdapterOfUpdateAssetEntity;

  private final EntityDeletionOrUpdateAdapter __updateAdapterOfAssetEntity;

  private final SharedSQLiteStatement __preparedStmtOf_setUpdateLaunchAsset;

  private final SharedSQLiteStatement __preparedStmtOf_markAllAssetsForDeletion;

  private final SharedSQLiteStatement __preparedStmtOf_unmarkUsedAssetsFromDeletion;

  private final SharedSQLiteStatement __preparedStmtOf_deleteAssetsMarkedForDeletion;

  public AssetDao_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfAssetEntity = new EntityInsertionAdapter<AssetEntity>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR REPLACE INTO `assets`(`id`,`url`,`headers`,`type`,`metadata`,`download_time`,`relative_path`,`hash`,`hash_type`,`marked_for_deletion`) VALUES (nullif(?, 0),?,?,?,?,?,?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, AssetEntity value) {
        stmt.bindLong(1, value.id);
        final String _tmp;
        _tmp = Converters.uriToString(value.url);
        if (_tmp == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, _tmp);
        }
        final String _tmp_1;
        _tmp_1 = Converters.jsonObjectToString(value.headers);
        if (_tmp_1 == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, _tmp_1);
        }
        if (value.type == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.type);
        }
        final String _tmp_2;
        _tmp_2 = Converters.jsonObjectToString(value.metadata);
        if (_tmp_2 == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, _tmp_2);
        }
        final Long _tmp_3;
        _tmp_3 = Converters.dateToLong(value.downloadTime);
        if (_tmp_3 == null) {
          stmt.bindNull(6);
        } else {
          stmt.bindLong(6, _tmp_3);
        }
        if (value.relativePath == null) {
          stmt.bindNull(7);
        } else {
          stmt.bindString(7, value.relativePath);
        }
        if (value.hash == null) {
          stmt.bindNull(8);
        } else {
          stmt.bindBlob(8, value.hash);
        }
        final int _tmp_4;
        _tmp_4 = Converters.hashTypeToInt(value.hashType);
        stmt.bindLong(9, _tmp_4);
        final int _tmp_5;
        _tmp_5 = value.markedForDeletion ? 1 : 0;
        stmt.bindLong(10, _tmp_5);
      }
    };
    this.__insertionAdapterOfUpdateAssetEntity = new EntityInsertionAdapter<UpdateAssetEntity>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR REPLACE INTO `updates_assets`(`update_id`,`asset_id`) VALUES (?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, UpdateAssetEntity value) {
        final byte[] _tmp;
        _tmp = Converters.uuidToBytes(value.updateId);
        if (_tmp == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindBlob(1, _tmp);
        }
        stmt.bindLong(2, value.assetId);
      }
    };
    this.__updateAdapterOfAssetEntity = new EntityDeletionOrUpdateAdapter<AssetEntity>(__db) {
      @Override
      public String createQuery() {
        return "UPDATE OR ABORT `assets` SET `id` = ?,`url` = ?,`headers` = ?,`type` = ?,`metadata` = ?,`download_time` = ?,`relative_path` = ?,`hash` = ?,`hash_type` = ?,`marked_for_deletion` = ? WHERE `id` = ?";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, AssetEntity value) {
        stmt.bindLong(1, value.id);
        final String _tmp;
        _tmp = Converters.uriToString(value.url);
        if (_tmp == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, _tmp);
        }
        final String _tmp_1;
        _tmp_1 = Converters.jsonObjectToString(value.headers);
        if (_tmp_1 == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, _tmp_1);
        }
        if (value.type == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.type);
        }
        final String _tmp_2;
        _tmp_2 = Converters.jsonObjectToString(value.metadata);
        if (_tmp_2 == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, _tmp_2);
        }
        final Long _tmp_3;
        _tmp_3 = Converters.dateToLong(value.downloadTime);
        if (_tmp_3 == null) {
          stmt.bindNull(6);
        } else {
          stmt.bindLong(6, _tmp_3);
        }
        if (value.relativePath == null) {
          stmt.bindNull(7);
        } else {
          stmt.bindString(7, value.relativePath);
        }
        if (value.hash == null) {
          stmt.bindNull(8);
        } else {
          stmt.bindBlob(8, value.hash);
        }
        final int _tmp_4;
        _tmp_4 = Converters.hashTypeToInt(value.hashType);
        stmt.bindLong(9, _tmp_4);
        final int _tmp_5;
        _tmp_5 = value.markedForDeletion ? 1 : 0;
        stmt.bindLong(10, _tmp_5);
        stmt.bindLong(11, value.id);
      }
    };
    this.__preparedStmtOf_setUpdateLaunchAsset = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "UPDATE updates SET launch_asset_id = ?, status = ? WHERE id = ?;";
        return _query;
      }
    };
    this.__preparedStmtOf_markAllAssetsForDeletion = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "UPDATE assets SET marked_for_deletion = 1;";
        return _query;
      }
    };
    this.__preparedStmtOf_unmarkUsedAssetsFromDeletion = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "UPDATE assets SET marked_for_deletion = 0 WHERE id IN ( SELECT asset_id FROM updates_assets INNER JOIN updates ON updates_assets.update_id = updates.id WHERE updates.keep);";
        return _query;
      }
    };
    this.__preparedStmtOf_deleteAssetsMarkedForDeletion = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM assets WHERE marked_for_deletion = 1;";
        return _query;
      }
    };
  }

  @Override
  public long _insertAsset(final AssetEntity asset) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      long _result = __insertionAdapterOfAssetEntity.insertAndReturnId(asset);
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void _insertUpdateAsset(final UpdateAssetEntity updateAsset) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __insertionAdapterOfUpdateAssetEntity.insert(updateAsset);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void updateAsset(final AssetEntity assetEntity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __updateAdapterOfAssetEntity.handle(assetEntity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void insertAssets(final List<AssetEntity> assets, final UpdateEntity update) {
    __db.beginTransaction();
    try {
      AssetDao_Impl.super.insertAssets(assets, update);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public boolean addExistingAssetToUpdate(final UpdateEntity update, final Uri url,
      final boolean isLaunchAsset) {
    __db.beginTransaction();
    try {
      boolean _result = AssetDao_Impl.super.addExistingAssetToUpdate(update, url, isLaunchAsset);
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public List<AssetEntity> deleteUnusedAssets() {
    __db.beginTransaction();
    try {
      List<AssetEntity> _result = AssetDao_Impl.super.deleteUnusedAssets();
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void _setUpdateLaunchAsset(final long assetId, final UpdateStatus status,
      final UUID updateId) {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_setUpdateLaunchAsset.acquire();
    int _argIndex = 1;
    _stmt.bindLong(_argIndex, assetId);
    _argIndex = 2;
    final int _tmp;
    _tmp = Converters.statusToInt(status);
    _stmt.bindLong(_argIndex, _tmp);
    _argIndex = 3;
    final byte[] _tmp_1;
    _tmp_1 = Converters.uuidToBytes(updateId);
    if (_tmp_1 == null) {
      _stmt.bindNull(_argIndex);
    } else {
      _stmt.bindBlob(_argIndex, _tmp_1);
    }
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOf_setUpdateLaunchAsset.release(_stmt);
    }
  }

  @Override
  public void _markAllAssetsForDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_markAllAssetsForDeletion.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOf_markAllAssetsForDeletion.release(_stmt);
    }
  }

  @Override
  public void _unmarkUsedAssetsFromDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_unmarkUsedAssetsFromDeletion.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOf_unmarkUsedAssetsFromDeletion.release(_stmt);
    }
  }

  @Override
  public void _deleteAssetsMarkedForDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_deleteAssetsMarkedForDeletion.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOf_deleteAssetsMarkedForDeletion.release(_stmt);
    }
  }

  @Override
  public List<AssetEntity> _loadAssetsMarkedForDeletion() {
    final String _sql = "SELECT * FROM assets WHERE marked_for_deletion = 1;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false);
    try {
      final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
      final int _cursorIndexOfUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "url");
      final int _cursorIndexOfHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "headers");
      final int _cursorIndexOfType = CursorUtil.getColumnIndexOrThrow(_cursor, "type");
      final int _cursorIndexOfMetadata = CursorUtil.getColumnIndexOrThrow(_cursor, "metadata");
      final int _cursorIndexOfDownloadTime = CursorUtil.getColumnIndexOrThrow(_cursor, "download_time");
      final int _cursorIndexOfRelativePath = CursorUtil.getColumnIndexOrThrow(_cursor, "relative_path");
      final int _cursorIndexOfHash = CursorUtil.getColumnIndexOrThrow(_cursor, "hash");
      final int _cursorIndexOfHashType = CursorUtil.getColumnIndexOrThrow(_cursor, "hash_type");
      final int _cursorIndexOfMarkedForDeletion = CursorUtil.getColumnIndexOrThrow(_cursor, "marked_for_deletion");
      final List<AssetEntity> _result = new ArrayList<AssetEntity>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final AssetEntity _item;
        final Uri _tmpUrl;
        final String _tmp;
        _tmp = _cursor.getString(_cursorIndexOfUrl);
        _tmpUrl = Converters.stringToUri(_tmp);
        final String _tmpType;
        _tmpType = _cursor.getString(_cursorIndexOfType);
        _item = new AssetEntity(_tmpUrl,_tmpType);
        _item.id = _cursor.getLong(_cursorIndexOfId);
        final String _tmp_1;
        _tmp_1 = _cursor.getString(_cursorIndexOfHeaders);
        _item.headers = Converters.stringToJsonObject(_tmp_1);
        final String _tmp_2;
        _tmp_2 = _cursor.getString(_cursorIndexOfMetadata);
        _item.metadata = Converters.stringToJsonObject(_tmp_2);
        final Long _tmp_3;
        if (_cursor.isNull(_cursorIndexOfDownloadTime)) {
          _tmp_3 = null;
        } else {
          _tmp_3 = _cursor.getLong(_cursorIndexOfDownloadTime);
        }
        _item.downloadTime = Converters.longToDate(_tmp_3);
        _item.relativePath = _cursor.getString(_cursorIndexOfRelativePath);
        _item.hash = _cursor.getBlob(_cursorIndexOfHash);
        final int _tmp_4;
        _tmp_4 = _cursor.getInt(_cursorIndexOfHashType);
        _item.hashType = Converters.intToHashType(_tmp_4);
        final int _tmp_5;
        _tmp_5 = _cursor.getInt(_cursorIndexOfMarkedForDeletion);
        _item.markedForDeletion = _tmp_5 != 0;
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public List<Long> _loadAssetWithUrl(final Uri url) {
    final String _sql = "SELECT id FROM assets WHERE url = ? LIMIT 1;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    final String _tmp;
    _tmp = Converters.uriToString(url);
    if (_tmp == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, _tmp);
    }
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false);
    try {
      final List<Long> _result = new ArrayList<Long>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final Long _item;
        if (_cursor.isNull(0)) {
          _item = null;
        } else {
          _item = _cursor.getLong(0);
        }
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public List<AssetEntity> loadAssetsForUpdate(final UUID id) {
    final String _sql = "SELECT assets.id, url, headers, type, assets.metadata, download_time, relative_path, hash, hash_type, marked_for_deletion FROM assets INNER JOIN updates_assets ON updates_assets.asset_id = assets.id INNER JOIN updates ON updates_assets.update_id = updates.id WHERE updates.id = ?;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    final byte[] _tmp;
    _tmp = Converters.uuidToBytes(id);
    if (_tmp == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindBlob(_argIndex, _tmp);
    }
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false);
    try {
      final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
      final int _cursorIndexOfUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "url");
      final int _cursorIndexOfHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "headers");
      final int _cursorIndexOfType = CursorUtil.getColumnIndexOrThrow(_cursor, "type");
      final int _cursorIndexOfMetadata = CursorUtil.getColumnIndexOrThrow(_cursor, "metadata");
      final int _cursorIndexOfDownloadTime = CursorUtil.getColumnIndexOrThrow(_cursor, "download_time");
      final int _cursorIndexOfRelativePath = CursorUtil.getColumnIndexOrThrow(_cursor, "relative_path");
      final int _cursorIndexOfHash = CursorUtil.getColumnIndexOrThrow(_cursor, "hash");
      final int _cursorIndexOfHashType = CursorUtil.getColumnIndexOrThrow(_cursor, "hash_type");
      final int _cursorIndexOfMarkedForDeletion = CursorUtil.getColumnIndexOrThrow(_cursor, "marked_for_deletion");
      final List<AssetEntity> _result = new ArrayList<AssetEntity>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final AssetEntity _item;
        final Uri _tmpUrl;
        final String _tmp_1;
        _tmp_1 = _cursor.getString(_cursorIndexOfUrl);
        _tmpUrl = Converters.stringToUri(_tmp_1);
        final String _tmpType;
        _tmpType = _cursor.getString(_cursorIndexOfType);
        _item = new AssetEntity(_tmpUrl,_tmpType);
        _item.id = _cursor.getLong(_cursorIndexOfId);
        final String _tmp_2;
        _tmp_2 = _cursor.getString(_cursorIndexOfHeaders);
        _item.headers = Converters.stringToJsonObject(_tmp_2);
        final String _tmp_3;
        _tmp_3 = _cursor.getString(_cursorIndexOfMetadata);
        _item.metadata = Converters.stringToJsonObject(_tmp_3);
        final Long _tmp_4;
        if (_cursor.isNull(_cursorIndexOfDownloadTime)) {
          _tmp_4 = null;
        } else {
          _tmp_4 = _cursor.getLong(_cursorIndexOfDownloadTime);
        }
        _item.downloadTime = Converters.longToDate(_tmp_4);
        _item.relativePath = _cursor.getString(_cursorIndexOfRelativePath);
        _item.hash = _cursor.getBlob(_cursorIndexOfHash);
        final int _tmp_5;
        _tmp_5 = _cursor.getInt(_cursorIndexOfHashType);
        _item.hashType = Converters.intToHashType(_tmp_5);
        final int _tmp_6;
        _tmp_6 = _cursor.getInt(_cursorIndexOfMarkedForDeletion);
        _item.markedForDeletion = _tmp_6 != 0;
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
